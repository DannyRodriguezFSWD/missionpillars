<?php

namespace App\Classes\XLSFiles;

use App\Constants;
use App\Classes\MissionPillarsLog;
use App\Models\Contact;
use App\Models\CustomField;
use App\Models\CustomFieldValue;
use App\Models\Folder;
use App\Models\Note;
use App\Models\Tag;

use Carbon\Carbon;
use Maatwebsite\Excel\Facades\Excel;

/**
 * Description of Mailchimp
 *
 * @author josemiguel
 */
class XLSFiles {
    const STRUCTURE = [
        "first_name",
        "middle_name",
        "last_name",
        "preferred_name",
        "birth_date",
        "email",
        "cell_phone",
        "gender",
        "marital_status",
        "tags_comma_separated",
        "address",
        "city",
        "region",
        "country",
        "postal_code",
        "position",
        "organization",
        "website"
    ];
    
    /**
     * TODO consider providing import options. e.g., merge with existing, merge duplicates on import
     */
    public static function import($file) {
        Excel::filter('chunk')->load($file->path())->chunk(100, function($results) {
            $folder = Folder::where('name', 'Imported')->first();
            if (!$folder) {
                $folder = new Folder();
                array_set($folder, 'name', 'Imported');
                array_set($folder, 'folder_parent_id', array_get(Constants::TAG_SYSTEM, 'FOLDERS.AUTO_GENERATED'));
                array_set($folder, 'type', 'TAGS');
                array_set($folder, 'is_system_autogenerated', true);
                auth()->user()->tenant->folders()->save($folder);
            }
            $starttime = Carbon::now();
            
            foreach ($results as $row) {
                if ($birthdate = array_get($row, 'birth_date')) {
                    $value = dbDateFormat($birthdate);
                    if ($value) array_set($row, 'birth_date', $value);
                    else array_set($row, 'imported birth_date', $birthdate);
                }
                
                // Find existing contact by email and first name, ignoring currently imported contacts
                $contact = Contact::where('email_1', array_get($row, 'email'))
                ->hasEmail1()->where('created_at', '<', $starttime)
                ->first(); 
                if (!$contact) {
                    $contact = new Contact();
                    $contact->assignFromExcelRow($row);
                    if (!auth()->user()->tenant->contacts()->save($contact)) {
                        MissionPillarsLog::log(['event'=> 'Import Contacts',data=>['contact'=> $contact->toArray()]]);
                    }
                }
                else{
                    $contact->assignFromExcelRow($row);
                    $contact->update();
                }

                if($contact){
                    $contact->setAddressFromExcelRow($row);
                }

                $tags = XLSFiles::tags($row, $folder);
                if(count($tags) > 0){
                    $contact->tags()->sync(array_pluck($tags, 'id'), false);
                }
                
                $custom_fields = array_except($row, XLSFiles::STRUCTURE);
                if(count($custom_fields) > 0){
                    XLSFiles::customFields($custom_fields, $contact);
                }
                
                if (array_get($row, 'note')) {
                    $note = new Note();
                    $note->user_id = array_get(auth()->user(), 'id');
                    $note->relation_id = array_get($contact, 'id');
                    $note->relation_type = 'App\Models\Contact';
                    $note->title = 'Imported Note';
                    $note->content = array_get($row, 'note');
                    $note->date = date('Y-m-d H:i:s');

                    auth()->user()->tenant->notes()->save($note);

                    $note->refresh();
                }
            }
        }, false);
    }
    
    public static function customFields($fields, $contact) {
        foreach ($fields as $key => $value){
            if (empty($value)) continue;
            $customField = CustomField::findOrCreate($key, $contact);
            $customValue = $customField->customValues()->where([
                ['relation_id', '=', array_get($contact, 'id')],
                ['relation_type', '=', get_class($contact)],
            ])->first();
            
            if(!$customValue){
                $customValue = CustomFieldValue::findOrCreate($value, $contact, $customField);
            }
            else{
                array_set($customValue, 'value', $value);
                $customValue->update();
            }
        }
    }

    public static function tags($row, $folder) {
        $tags = explode(',', array_get($row, 'tags_comma_separated'));
        $result = [];
        foreach ($tags as $t) {
            $t = trim($t);
            if ($t != '') {
                $exist = Tag::where([
                            ['name', '=', $t],
                            ['folder_id', '=', array_get($folder, 'id')]
                        ])->first();

                if (!$exist) {
                    $tag = new \App\Models\Tag();
                    array_set($tag, 'name', $t);
                    array_set($tag, 'folder_id', array_get($folder, 'id'));
                    auth()->user()->tenant->tags()->save($tag);
                } else {
                    $tag = $exist;
                }
                array_push($result, $tag);
            }
        }
        return $result;
    }

}
