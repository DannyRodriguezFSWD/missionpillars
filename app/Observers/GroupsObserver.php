<?php

namespace App\Observers;

use App\Constants;
use App\Models\Tag;
use App\Models\Group;
use App\Models\Calendar;
use App\Traits\TagsTrait;

/**
 * Description of ChatOfAccountObserver
 *
 * @author josemiguel
 */
class GroupsObserver {
    use TagsTrait;
    
    private $folder = null;
    /**
     * Creates new tag if not exists and assigns 
     * tag property to Purpose
     * @param Purpose $group
     */
    public function created(Group $group) {
        $folderId = array_get($group->folder, 'map_tag_folder_id', array_get(Constants::TAG_SYSTEM, 'FOLDERS.GROUPS'));
        $tagName = str_replace(':name:', array_get($group, 'name'), array_get(Constants::TAG_SYSTEM, 'TAGS.GROUP'));
        
        if (!$this->tagExists($tagName, $folderId)) {
            $this->setTag($group, $folderId, true);
        }
        
//        if( is_null(array_get($group, 'calendar')) ){
//            $calendar = new Calendar();
//            array_set($calendar, 'name', array_get($group, 'name'). ' Calendar');
//            array_set($calendar, 'color', $calendar->randomHexadecimalColor());
//            array_set($calendar, 'public', true);
//            array_set($calendar, 'is_system_autogenerated', true);
//            
//            if(auth()->user()->tenant->calendars()->save($calendar)){
//                array_set($group, 'calendar_id', array_get($calendar, 'id'));
//                $group->update();
//            }
//        }
    }
    
    public function updated(Group $group) {
        $folderId = array_get($group, 'folder.map_tag_folder_id', array_get(Constants::TAG_SYSTEM, 'FOLDERS.GROUPS'));
        $tagName = str_replace(':name:', array_get($group, 'name'), array_get(Constants::TAG_SYSTEM, 'TAGS.GROUP'));
        $tag = Tag::find(array_get($group, 'map_tag_id'));
        if($tag){
            array_set($tag, 'name', $tagName);
            array_set($tag, 'folder_id', $folderId);
            $tag->update();
        }
        
        if( !is_null($group->calendar) ){
            $calendar = $group->calendar;
            array_set($calendar, 'name', array_get($group, 'name'). ' Calendar');
            $calendar->update();
        }
    }
    
    public function deleted(Group $group) {
        $tag = Tag::find(array_get($group, 'map_tag_id'));
        if($tag){
            $tag->delete();
        }
        if( !is_null($group->calendar) ){
            $calendar = $group->calendar;
            $calendar->delete();
        }
    }
}
