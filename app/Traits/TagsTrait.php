<?php

namespace App\Traits;

use App\Models\Tag;
use App\Models\Folder;
use App\Models\Group;
use Illuminate\Support\Facades\DB;
use App\Constants;

/**
 *
 * @author josemiguel
 */
trait TagsTrait {

    public function getDataTree($root, $id = null, $type = 'TAGS') {
        $tree = $this->structFoldersTree($root, $type);
        $current = Folder::where('id', $id)->first();
        $folders = Folder::where('folder_parent_id', $id)->get();
        
        $data = [
            'tree' => $tree,
            'root' => $current,
            'folders' => $folders,
        ];
        
        switch ($type){
            case 'GROUPS' :
                $groups = Group::where('folder_id', $id)->get();
                array_set($data, 'groups', $groups);
                break;
            default :
                $tags = Tag::where('folder_id', $id)->get();
                array_set($data, 'tags', $tags);
                break;
        }
        
        return $data;
    }

    public function structFoldersTree($folder, $type) {
        if ($folder) {
            switch ($type) {
                case 'GROUPS':
                    $children = array_get($folder, 'getGroupsChildrenFolders');
                    break;
                default :
                    $children = array_get($folder, 'getTagsChildrenFolders');
                    break;
            }
            foreach ($children as $child){
                $this->structFoldersTree($child, $type);
            }
        }
        
        return $folder;
    }

    public function formatVueData($root){
        $merged = [];
        foreach($root->getTagsChildrenFolders as $folder){
            $item = [
                'id' => array_get($folder, 'id'),
                'text' => array_get($folder, 'name'),
                'children' => $this->formatVueData($folder)
            ];
            array_push($merged, $item);
        }
        foreach($root->tags as $tag){
            $item = [
                'id' => array_get($tag, 'id'),
                'text' => array_get($tag, 'name')
            ];
            array_push($merged, $item);
        }

        return $merged;
    }
    
    public function setTag($model, $folder, $autogenerated = false, $name = null) {
        $classname = get_class($model);
        $tag = new Tag();
        
        if($name){
            array_set($tag, 'name', $name);
        }
        else{
            array_set($tag, 'name', array_get($model, 'name', 'unrecognized'. get_class($model)));
        }
        
        array_set($tag, 'folder_id', $folder);
        array_set($tag, 'relation_id', array_get($model, 'id'));
        array_set($tag, 'relation_type', $classname);
        array_set($tag, 'is_system_autogenerated', $autogenerated);
        auth()->user()->tenant->tags()->save($tag);
        
        if($classname === Group::class){
            array_set($model, 'map_tag_id', array_get($tag, 'id'));
            $model->update();
        }
        
        return $tag;
    }
    
    public function tagExists($name, $folder) {
        $tag = Tag::where([
                    ['name', '=', $name],
                    ['folder_id', '=', $folder]
                ])->first();
        
        return $tag;
    }
    
    /**
     * Creates or return existing tag
     */
    public static function findOrCreate($name, $folder = null, $tenant = null, $autogenerated = false) {
        if( auth()->check() ){
            $tag = Tag::where([
                    ['name', '=', $name],
                    ['folder_id', '=', array_get($folder, 'id')]
                ])->first();
            if(is_null($tag)){
                $tag = new Tag();
                array_set($tag, 'name', $name);
                array_set($tag, 'folder_id', array_get($folder, 'id'));
                array_set($tag, 'is_system_autogenerated', $autogenerated);
                auth()->user()->tenant->folders()->save($tag);
            }
        }
        else{
            $tag = Tag::withoutGlobalScopes()->where([
                    ['name', '=', $name],
                    ['folder_id', '=', array_get($folder, 'id')],
                    ['tenant_id', '=', array_get($tenant, 'id')]
                ])->first();
            if(is_null($tag)){
                $id = DB::table('tags')->insertGetId([
                    'name' => $name,
                    'folder_id' => array_get($folder, 'id'),
                    'tenant_id' => array_get($tenant, 'id'),
                    'is_system_autogenerated' => $autogenerated
                ]);
                $tag = Tag::withoutGlobalScopes()->where('id', $id)->first();
            }
        }
        
        return $tag;
    }

}
