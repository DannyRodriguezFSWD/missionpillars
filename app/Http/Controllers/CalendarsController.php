<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Calendar;
use App\Models\CalendarEvent;
use App\Models\CalendarEventTemplateSplit;
use App\Constants;
use Ramsey\Uuid\Uuid;
use App\Classes\Subdomains\TenantSubdomain;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;
use App\Classes\Events\Events as CalendarEvents;

class CalendarsController extends Controller {

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request) {
        $action = array_get($request, 'action');
        
        $calendars = Calendar::with('events')->where('name', '!=', 'Main Calendar')->orderBy('name')->paginate();
        
        if (array_get($request, 'page', 1) === 1) {
            $mainCalendar = Calendar::with('events')->where('name', 'Main Calendar')->first();
            $calendars->prepend($mainCalendar);
        }
        
        if (count($calendars) <= 0 || $action === 'create_default_calendar') {
            $calendar = new Calendar();
            array_set($calendar, 'name', 'Main Calendar');
            array_set($calendar, 'color', array_get(Constants::CALENDARS, 'DEFAULT_COLOR'));
            array_set($calendar, 'public', true);
            array_set($calendar, 'is_system_autogenerated', true);
            auth()->user()->tenant->calendars()->save($calendar);

            if ($action === 'create_default_calendar') {
                return redirect()->route('events.index');
            }

            $calendars = Calendar::with('events')->paginate();
        }
        $data = [
            'calendars' => $calendars
        ];
        return view('calendars.index')->with($data);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create() {
        $data = ['calendar' => null];
        return view('calendars.create')->with($data);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request) {
        $name = trim(array_get($request, 'name'));
        $calendar = Calendar::where('name', $name)->first();
        if ($calendar) {
            $error = str_replace(':calendar:', $name, __('Calendar :calendar: already exists'));
            return redirect()->route('calendars.index')->with('error', __($error));
        }

        $calendar = mapModel(new Calendar(), $request->all());
        array_set($calendar, 'is_system_autogenerated', false);
        array_set($calendar, 'uuid', Uuid::uuid1());

        if (auth()->user()->tenant->calendars()->save($calendar)) {
            return redirect()->route('calendars.edit', ['id' => array_get($calendar, 'id')])->with('message', __('Calendar added successfully'));
        }

        abort(500);
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id) {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id) {
        $calendar = Calendar::findOrFail($id);
        if (is_null(array_get($calendar, 'uuid'))) {
            array_set($calendar, 'uuid', Uuid::uuid1());
            $calendar->update();
        }
        $data = [
            'calendar' => $calendar
        ];
        return view('calendars.edit')->with($data);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id) {
        $calendar = Calendar::findOrFail($id);
        array_set($calendar, 'public', 0);
        mapModel($calendar, $request->all());

        if ($calendar->update()) {
            return redirect()->route('calendars.edit', ['id' => $id])->with('message', __('Calendar updated successfully'));
        }

        abort(500);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id) {
        Calendar::destroy($id);
        return redirect()->route('calendars.index')->with('message', __('Calendar added deleted'));
    }

    public function setPublic(Request $request) {
        $calendar = Calendar::find(array_get($request, 'id'));

        if (is_null($calendar)) {
            $response = ['status' => 404, 'message' => 'Calendar not found'];
            return response()->json($response);
        }

        array_set($calendar, 'public', array_get($request, 'shared', false));
        $calendar->update();

        $response = ['status' => 200, 'message' => 'Calendar updated'];

        return response()->json($response);
    }

    public function share($id, Request $request) {
        $tenant = TenantSubdomain::getTenant($request, array_get($request, 'subdomain'));
        if (md5(array_get($tenant, 'subdomain')) === $id) {//was shared from events
            $ids = explode('-', array_get($request, 'calendars', '0'));
            $calendars = Calendar::withoutGlobalScopes()->whereIn('id', $ids)
                            ->where('public', true)->get();
            $data = [
                'calendars' => $calendars,
                'public' => true
            ];

        } else {//check if was shared individually
            $calendars = Calendar::withoutGlobalScopes()->where('uuid', $request->segment(2))
                ->where('public', true)->get();
            $data = [
                'calendars' => $calendars,
                'public' => true
            ];
        }
        return view('calendars.public')->with($data);
    }

    public function shareCalendarListMode($id, Request $request) {
        $tenant = TenantSubdomain::getTenant($request, array_get($request, 'subdomain'));
        if (md5(array_get($tenant, 'subdomain')) === $id) {//was shared from events
            $ids = explode('-', array_get($request, 'calendars', '0'));
            $calendars = Calendar::withoutGlobalScopes()->whereIn('id', $ids)
                            ->where('public', true)->get();

            if (!is_null(array_get($request, 'show'))) {
                $show = (array) array_get($request, 'show');
                $showing = collect($calendars)->where('id', array_get($request, 'show'))->first();
            } else {
                $show = array_pluck($calendars, 'id');
                $showing = null;
            }

            $year = array_get($request, 'year', date('Y'));
            $month = array_get($request, 'month', date('m'));

            $events = $this->getEvents($year, $month, $show);

            $yearsdb = CalendarEventTemplateSplit::select([DB::raw('YEAR(start_date) as _year')])->groupBy(DB::raw('YEAR(start_date)'))->get();
            $years = collect($yearsdb)->reduce(function($carry, $item) {
                $carry[array_get($item, '_year')] = array_get($item, '_year');
                return $carry;
            }, []);

            $data = [
                'calendars' => $calendars,
                'public' => true,
                'events' => $events,
                'id' => $id,
                'showing' => $showing,
                'years' => $years,
                'year' => $year,
                'month' => $month
            ];
        } else {//check if was shared individually
            $data = [];
        }

        return view('calendars.public-list')->with($data);
    }

    /**
     * 
     * @param type $year
     * @param type $month
     * @param type $show 1 or more calendars to show
     * @param type $showing current calendar that its bee showing
     * @return type
     */
    public function getEvents($year, $month, $show = []) {
        if(($year+0) > date('Y')+0){
            $year = date('Y');
        }
        
        if(($month+0) > 12 || ($month+0) <= 0){
            $month = date('m');
        }
        $date = "$year-$month-01";
        
        try {
            $from = Carbon::parse($date);
            $start = $from->startOfMonth();
            $end = $from->copy()->endOfMonth();
        } catch (\Exception $exc) {
            $start = Carbon::now()->startOfMonth();
            $end = Carbon::now()->endOfMonth();
        }

        $events = CalendarEvent::where([
                    ['repeat', '=', true]
                ])
                ->whereIn('calendar_id', $show)
                ->get();

        foreach ($events as $event) {
            CalendarEvents::splits($event, $start, null, $end);
        }

        $splits = CalendarEventTemplateSplit::whereHas('template', function($query) use($show) {
                    $query->whereIn('calendar_id', $show);
                })
                ->whereBetween('start_date', [$start, $end])
                ->orderBy('start_date', 'asc')
                ->get();

        return $splits;
    }

}
